import InputError from "@/Components/InputError";
import { useForm, usePage } from "@inertiajs/react";
import { Alert, Button, CircularProgress, Dialog, DialogContent, Divider, Grid2, InputAdornment, Stack, TextField, Typography, useTheme } from "@mui/material";
import axios from "axios";
import { useRef, useState } from "react";

export default function AddSpBasic({ openAddSpBasic, setOpenAddSpBasic }) {
    const theme = useTheme();
    const pumpkinColor = theme.palette.pumpkinColor;
    const user = usePage().props.auth.user;
    const [statusSaved, setStatusSaved] = useState(false);
    const searchSp = useRef(null);
    const [searching, setSerching] = useState(false);

    const handleOnClose = (e, reason) => {
        if (reason === 'backdropClick' || reason === 'escapeKeyDown') {
            return;
        }
        setOpenAddSpBasic(false);
    }

    const { data, setData, processing, errors, post } = useForm({
        is_code_cust_id: user.is_code_cust_id,
        sku_code: '',
        sku_name: '',
        sp_code: '',
        sp_name: '',
        qty_sp: '',
        received_date: ''
    });

    const handleOnSave = async (e) => {
        e.preventDefault();

        console.log("üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend:", data); // Log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ
        try {
            await post(route('stockSp.storeOneSp'), {
                preserveScroll: true,
                onSuccess: (response) => {
                    console.log("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", response);
                    // setOpenAddSpBasic(false);
                    setStatusSaved(true);
                },
                onError: (errors) => {
                    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å Backend:", errors);
                }
            });

            console.log("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!"); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô await ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        } catch (error) {
            console.error("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô post() :", error);
        }
    };

    const handleSearch = async () => {
        if (!searchSp.current.value) return;
        try {
            setSerching(true);
            const response = await axios.get(route('stockSp.searchSku', {
                sp_code: searchSp.current.value,
                is_code_cust_id: user.is_code_cust_id
            }));
            console.log("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:", response);

            if (response.status === 200) {
                setData('sku_code', response.data.data.sku_code);
                setData('sku_name', response.data.data.sku_name);
                setData('sp_code', response.data.data.sp_code);
                setData('sp_name', response.data.data.sp_name);
                // setData('qty_sp', response.data.data.qty_sp);
            }
        } catch (error) {
            setData('sku_code', '');
            setData('sku_name', '');
            setData('sp_code', '');
            setData('sp_name', '');
            setData('qty_sp', '');
            console.error("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô handleSearch() :", error);
        } finally {
            setSerching(false);
        }
    }

    return (
        <Dialog
            open={openAddSpBasic}
            onClose={(e, reason) => handleOnClose(e, reason)}
            fullWidth
            maxWidth="md"
        >
            <DialogContent>
                <Grid2 container spacing={2}>
                    <Grid2 size={12}>
                        <Typography variant="h6" fontWeight='bold'>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</Typography>
                    </Grid2>
                    <Grid2 size={12}>
                        <Stack direction={{ md: 'row', xs: 'column' }} spacing={2}>
                            <TextField
                                inputRef={searchSp}
                                autoFocus fullWidth label='‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà ‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà'
                                placeholder="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á SP001"
                            />
                            <Button disabled={searching} variant="contained" onClick={handleSearch}>
                                {searching && <CircularProgress size={24} />}
                                ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                            </Button>
                        </Stack>
                        <br />
                        <Divider />
                    </Grid2>
                    <form onSubmit={handleOnSave}>
                        <Grid2 container spacing={2}>
                            {statusSaved && <Grid2 size={12}>
                                <Alert severity="success" onClose={() => setStatusSaved(false)}>
                                    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                                </Alert>
                            </Grid2>}

                            <Grid2 size={12}>
                                <Typography variant="h6" fontWeight='bold'>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà</Typography>
                            </Grid2>
                            <Grid2 size={12}>
                                <Typography variant='body2' sx={{ color: pumpkinColor.main }}>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</Typography>
                            </Grid2>
                            <Grid2 size={{ md: 6, xs: 12 }}>
                                <TextField
                                    value={data.sku_code}
                                    onChange={(e) => setData('sku_code', e.target.value)}
                                    size="small"
                                    fullWidth label='‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'
                                    placeholder="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 50277"
                                />
                            </Grid2>
                            <Grid2 size={{ md: 6, xs: 12 }}>
                                <TextField
                                    value={data.sku_name}
                                    onChange={(e) => setData('sku_name', e.target.value)}
                                    size="small"
                                    fullWidth label='‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'
                                    placeholder="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏à‡∏µ‡∏¢‡∏£‡∏°‡∏∑‡∏≠"
                                />
                            </Grid2>
                            <Grid2 size={12}>
                                <Typography variant='body2' sx={{ color: pumpkinColor.main }}>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà</Typography>
                            </Grid2>
                            <Grid2 size={{ md: 6, xs: 12 }}>
                                <TextField
                                    error={errors.sp_code && !data.sp_code}
                                    value={data.sp_code}
                                    onChange={(e) => setData('sp_code', e.target.value)}
                                    required size="small"
                                    fullWidth label='‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà'
                                    placeholder="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á SP001"
                                />
                                <InputError message={errors.sp_code} />
                            </Grid2>
                            <Grid2 size={{ md: 6, xs: 12 }}>
                                <TextField
                                    error={errors.sp_name && !data.sp_name}
                                    value={data.sp_name}
                                    onChange={(e) => setData('sp_name', e.target.value)}
                                    required size="small"
                                    fullWidth label='‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà'
                                    placeholder="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏õ‡∏£‡∏∞‡∏Å‡∏ö‡∏ö‡∏ô"
                                />
                                <InputError message={errors.sp_name} />
                            </Grid2>
                            <Grid2 size={{ md: 12, xs: 12 }}>
                                <TextField
                                    required fullWidth label='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤'
                                    error={errors.qty_sp && !data.qty_sp} value={data.qty_sp}
                                    onChange={(e) => setData('qty_sp', e.target.value)}
                                    type="number" size="small"
                                    placeholder="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏õ‡∏£‡∏∞‡∏Å‡∏ö‡∏ö‡∏ô"
                                />
                                <InputError message={errors.qty_sp} />
                            </Grid2>
                            <Grid2 size={12}>
                                <Stack direction={{ md: 'row', xs: 'column' }} spacing={2}>
                                    <Button disabled={processing} variant="outlined" onClick={() => setOpenAddSpBasic(false)} fullWidth>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</Button>
                                    <Button disabled={processing} type="submit" variant="contained" fullWidth>
                                        {processing && <CircularProgress size={24} />}
                                        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                                    </Button>
                                </Stack>
                            </Grid2>
                        </Grid2>
                    </form>

                </Grid2>
            </DialogContent>
        </Dialog>
    )
}